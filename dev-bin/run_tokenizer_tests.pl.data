==> c015.in <==
# These are syntactically correct; set expecting unknown at a comma
print "hello1\n", || print "hi1\n";
print "hello2\n", && print "bye2\n";
print "hello3\n", or print "bye3\n";
print "hello4\n", and print "bye4\n";

==> c017.in <==
my @words = qw(To view this email as a web page go here);
my @subs;
push @subs, sub { my $i=shift; $i %= @words; print "$words[$i] "; return $subs[0]};
$subs[0](0)(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11);
print "\n";

==> c029.in <==
$Msg#sc#
->#sc#
$field#sc#
(#sc#
)#sc#
;#sc#


==> c033.in <==
print$my_bag
&#sc#
$your_bag
,
"\n"
;


==> c035.in <==
my$ascii#sc#
=#sc#
$formatter#sc#
->#sc#
format#sc#
(#sc#
$html#sc#
)#sc#
;#sc#


==> c036.in <==
# this is a valid program, '%#' is a punctuation variable
%# = ( foo => 'bar', baz => 'buz' );
print keys(%#), "\n";

#<<V
# but this is a syntax error (space before # makes a side comment)
# (perltidy was ignoring the space and forming '%#' here)
% # = ( foo => 'bar', baz => 'buz' );
print keys(%#), "\n";
#>>V

# this is a valid program, '@#' is a punctuation variable
@# = ( foo , 'bar', baz , 'buz' );
print @#, "\n";

# this is a valid program, the space makes the '#' a side comment
# perltidy formed %# here, causing an error
% #
var = ( foo => 'bar', baz => 'buz' );
print keys(%var), "\n";

==> c037.in <==
is(
$one
->#sc#
package
,
"bar"
,
"Got package"
)
;


==> c038.in <==
sub plugh () :#
Ugly('\(") : Bad;

==> c040.in <==
$bond_str
=
VERY_WEAK #sc#
/ #sc#
1.05
;

ok
/[^\s]+/#sc#
,
'm/[^\s]/ utf8'
;


==> c041.in <==
@ret
=
$o
->#
SUPER'method
(
'whatever'
)
;


==> c043.in <==
# FIXED ; index not type 'k'
{#sc#
print$fh#sc#
"class='u'"
,#sc#
$self#sc#
->#sc#
index?#sc#
" href='#___top' title='click to go to top of document'\n"
:#sc#
"\n"
;#sc#
}#sc#

==> c068.in <==
my $var  = $^;
my @list = @^;
my %hash = %^;
my $glob = *^;
my $call = &^;
my $aa   = $^ ? "defined" : "not defined";
my $bb   = &^ ? "none"    : "ok";

==> c103.in <==
print $l<3? $_ : $l & 4 ? --$_ ? $_ : "No more" : $l & 3 ? $_ > 1 ? "if one of those" : "if that" : "e", " cop", $_ ^ 1 ? "ies " : "y ", $l ^ 3 ? $l & 2 ? "w" : $l & 4 ? "z" : "y" : "x";
print STDERR < BLABLA>;    # ok prints the word 'BLABLA'
print STDERR <DATA>;       # ok prints lines after __DATA__
print STDERR < DATA>;      # ok prints the word 'DATA'
print BLABLA <DATA>;       # ok; does nothing unless BLABLA is defined
print STDOUT <>;           # ok
print STDOUT < >;          # ok
print STDOUT < 6>;         # ok; prints '6'
print STDOUT < DATA>;      # ok
print STDOUT <DATA>;       # ok
print STDOUT <BUBBA>;      # ok
print STDOUT < BUBBA>;     # ok
print STDOUT <$BUBBA>;     # ok
print $fh <DATA>;          # ok
print $fh <BUBBA>;         # ok
__END__
print $fh < DATA>;     # syntax error
print $fh < BUBBA>;    # syntax error
print $fh <>;          # syntax error
print $fh < >;         # syntax error
print $fh < 6>;        # error
print $fh <6>;         # error

==> c106.in <==
my$seed=$$^$^T;

==> c109.in <==
s s(..)(.)sss
;

==> c147.in <==
my $str = $$# the process ID
 . " xxx\n";
print "str='$str'\n";

==> c208.in <==
$1x$2

==> c231.in <==
print {LABEL: print "Hello "; STDOUT} "World\n";

==> c243.in <==
print ${fh}
/hello/;          # pattern
print ${fh}
/ 5;              # division

==> c498.in <==
my $x;
{
    ## lexical sub 'if' defined
    our sub if() {
        ## lexical sub if does not apply recursively
        if ( !defined($x) ) { return 42 }
        return $x;
    }
    ## lexical 'if' active and hides keyword 'if':
    $x = if if if;
}    ## lexical 'if' goes out of scope
if ( $x == 42 ) {
    ## lexical sub 's' hides quote operator 's'
    my sub s : prototype() { $x }
    if ( s / 42 == 1 ) { print "$x//" }
}    ## lexical 's' goes out of scope
$x =~ s/42/bye/;
print "$x\n";

==> c532.in <==
method
  $name
  =>
  sub
  {
    ...
  };
method
       $p
       ->
       {name}
       =>
       sub {

       };



==> git82.in <==
say
$
{
fh
} <<~EOM;

say { $fh } <<EOM;

b^^
   EOM
